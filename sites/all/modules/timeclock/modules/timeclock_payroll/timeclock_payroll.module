<?php
/**
 * @file
 * Module file for timeclock_payroll.
 */

/**
 * @TODO Major rewrite required after refactor of departments, jobs and change from punch DB records to shift entities.
 */

/**
 * Implements hook_permission().
 */
function timeclock_payroll_permission() {
  return array(
    // Permission to allow a role to record a punch.
    'timeclock payroll view own' => array(
      'title' => t('View own payroll data'),
      'description' => t('Allow users their own view data generated by the timeclock_payroll module.'),
    ),
    // Permission to allow a role to record a punch.
    'timeclock payroll view all' => array(
      'title' => t('View all payroll data'),
      'description' => t('Allow users view all data generated by the timeclock_payroll module.'),
    ),
    // Administer Payroll settings.
    'timeclock payroll administer' => array(
      'title' => t('Administer payroll settings'),
      'description' => t('Allow users modify settings for the timeclock_payroll module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 */
function timeclock_payroll_menu() {
  $items['timeclock/payroll'] = array(
    'title' => 'Payroll',
    'description' => 'View Payroll Data',
    'page callback' => 'timeclock_payroll_main_page',
    'access arguments' => array('timeclock payroll view'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'timeclock_payroll.page.inc',
  );
  $items['user/%user/payroll'] = array(
    'title' => 'Timesheet',
    'page callback' => 'timeclock_payroll_user_timesheet',
    'access callback' => '_timeclock_payroll_access',
    'type' => MENU_LOCAL_TASK,
    'file' => 'timeclock_payroll.page.inc',
  );
  $items['admin/config/system/timeclock/payroll'] = array(
    'title' => 'Payroll',
    'description' => 'TimeClock Payroll intreface settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('timeclock_payroll_admin'),
    'access arguments' => array('timeclock payroll administer'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'timeclock_payroll.admin.inc',
  );
  return $items;
}

/**
 * Access callback: Checks whether the user has timeclock payroll view own.
 * @return bool TRUE if the user has permission, otherwise FALSE.
 * TRUE if the user has permission, otherwise FALSE.
 * @see timeclock_payroll_menu()
 */
function _timeclock_payroll_access() {
  if (user_access('timeclock payroll view all')) {
    return TRUE;
  }
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  $userpageload = user_load(arg(1));
  if ($account->uid == $userpageload->uid && user_access('timeclock payroll view own', $account) && $account->uid != 0) {
    return TRUE;
  }
  return FALSE;
}

function timeclock_payroll_get_employees_for_period($start, $end) {
  $select = db_select('timeclock_punches_edits', 'e');
  $select->orderBy('e.edit_id', 'ASC');
  $select->join('timeclock_punches', 'p', 'e.pid = p.pid');
  $select->condition('e.edit_timestamp', array($start, $end), 'BETWEEN');
  $select->groupBy('p.eid');
  $select->fields('p', array('eid'));
  $result = $select->execute();
  $result = $result->fetchAll();
  return $result;
}

function timeclock_payroll_get_employee_shifts($eid, $start, $end) {
  $sub = db_select('timeclock_punches_edits', 'e');
  $sub->fields('e', array('pid', 'edit_timestamp', 'memo', 'uid'));
  $sub->condition('e.edit_timestamp', array($start, $end), 'BETWEEN');
  $sub->orderBy('e.edit_id', 'DESC');

  $select = db_select('timeclock_punches', 'p');
  $select->join($sub, 'edits', 'edits.pid = p.pid');
  $select->fields('p', array('pid', 'in_out', 'method', 'timestamp'));
  $select->fields('edits', array('edit_timestamp', 'memo', 'uid'));
  $select->condition('p.eid', $eid);
  $select->condition('p.failure_code', 0);
  $select->groupBy('p.pid');

  $punches = $select->execute()->fetchAll();
  $results = $punches;
  return $results;
}

function timeclock_payroll_calculate_shift_length($difference) {
  $hours = floor($difference / 3600);
  $minutes = floor(($difference / 60) % 60);
  $seconds = $difference % 60;
  $hours_string = ($hours < 10) ? '0' . $hours : $hours;
  $minutes_string = ($minutes < 10) ? '0' . $minutes : $minutes;
  $seconds_string = ($seconds < 10) ? '0' . $seconds : $seconds;
  return "$hours_string:$minutes_string:$seconds_string";
}

/**
 * Return an array of # of pay periods forward or back
 *
 * $count determines how many payperiods to return. $operator send '+' to
 * count forward. Default is counting back 10 previous payperiods.
 */
function timeclock_payroll_payperiod_dates($count = 10, $operator = '-') {
  $current_payperiod = timeclock_payroll_current_payperiod();
  $length = variable_get('timeclock_payroll_payperiod_length');
  $period = 7 * $length;
  $operator = ($operator == '+') ? NULL : '-';
  $start = strtotime($operator . $period . ' days', $current_payperiod['current']);
    $end = strtotime($period . ' days', $start);
    $payperiods[] = array(
      'start' => $start,
      'end' => $end,
    );
  for ($i=1; $i<=$count; $i++) {
    $start = strtotime($operator . $period . ' days', $start);
    $end = strtotime($period . ' days', $start);
    $payperiods[] = array(
      'start' => $start,
      'end' => $end,
    );
  }
  return $payperiods;
}

function timeclock_payroll_current_payperiod() {
  $length = variable_get('timeclock_payroll_payperiod_length');
  $start = variable_get('timeclock_payroll_payperiod_start');
  switch($start) {
    case 0:
      $day = 'Sunday';
      break;
    case 1:
      $day = 'Monday';
      break;
    case 2:
      $day = 'Tuesday';
      break;
    case 3:
      $day  = 'Wednesday';
      break;
    case 4:
      $day = 'Thursday';
      break;
    case 5:
      $day = 'Friday';
      break;
    case 6:
      $day = 'Saturday';
      break;
  }
  $knownDate_array = variable_get('timeclock_payroll_payperiod_knowndate');
  $knownDate = strtotime($knownDate_array['day'] . '-' . $knownDate_array['month'] . '-' . $knownDate_array['year']);
  $period = 7 * $length;
  $nextdate = strtotime($period . ' days', $knownDate);
  $prevdate = strtotime('-' . $period . ' days', $knownDate);

  //Advance the dates if now is past the start of the next period.
  $now = strtotime("now");
  if ($now > $nextdate) {
    $prevdate = $knownDate;
    $knownDate = $nextdate;
    $knownDate_array = array(
      'day' => gmdate('d', $nextdate),
      'month' => gmdate('m', $nextdate),
      'year' => gmdate('Y', $nextdate),
    );
    $nextdate = strtotime($period . ' days', $knownDate);
    variable_set('timeclock_payroll_payperiod_knowndate', $knownDate_array);
  }
  $array = array(
    'previous' => $prevdate,
    'current' => $knownDate,
    'next' => $nextdate,
  );
  return $array;
}

function timeclock_payroll_all_edits_pid($pid) {
  $select = db_select('timeclock_punches_edits', 'e');
  $select->fields('e', array('pid', 'edit_timestamp', 'memo', 'uid'));
  $select->orderBy('e.edit_id', 'ASC');
  $select->join('timeclock_punches', 'p', 'e.pid = p.pid');
  $select->fields('p', array('pid', 'in_out', 'method', 'timestamp'));
  $select->fields('e', array('edit_timestamp', 'memo', 'uid'));
  $select->condition('p.pid', $pid);
  
  $punches = $select->execute()->fetchAll();
  $return = '<strong>Edits:</strong><ul>';
  foreach ($punches as $punch) {
    $edit_user = user_load($punch->uid);
    $edit_user_link = l($edit_user->name,'user/' . $punch->uid);
    $return .= '<li class="timeclock_payroll_edit">' . format_date($punch->edit_timestamp, 'short') . ' User: ' . $edit_user_link . '<br />' . t('Note:') . ' ' . $punch->memo . '</li>';
  }
  $return .= '</ul>';
  return $return;
}
